1/16 월요일
구문오류 문법이 틀려서 실행이 안됨
논리오류 문법이 맞고 실행도 되지만 원하는 결과가 아님

컴퓨팅 사고력
1. 컴퓨터의 특성을 잘 이해한다
2. 문제 해결 능력을 기른다        논리적 사고 == 작은 문제로 쪼개기
3. 프로그래밍 언어에 능숙해진다

프로그래밍 언어
기계어의 대안으로 사람이 이해할 수 있는 새로운 언어 개발
> 사람이 이해할 수 있는 문자로 구성
> 기본적인 규칙과 문법이 존재

파이썬 3.9.12 사용할 것
> 개발자로서 버전이 바뀌는 것을 알고 좋아해야 함
> 언어가 계속 바뀌듯이 프로그래밍 언어도 바뀜

컴퓨터의 이진수를 이해하기 위해 프로그래밍 언어(파이썬) 등장

= 은 할당연산자
변수를 사용해야 하는 이유
코드 유지 보수에 좋다.
변수를 사용하지 않으면 다른 사람이 코드를 이해할 수 없음
> 코드 가독성 증가
> 코드 수정이 용이
가장 우선순위가 낮음

~+- 단항연산자
우선순위 높음

연산자 우선순위가 같을 때
왼쪽부터 계산됨
헷갈리면 괄호 쓰기

변수의 할당
할당연산자로 할당
같은 값을 동시에 할당 가능
다른 값을 동시에 할당 가능

식별자 (identifier)
변수의 이름
읽기 쉽고 이해하기 쉬운 변수명이 최고
식별자의 이름은 알파벳, 언더바, 숫자로 구성

주석
코드에 남기는 메모
#
많은 내용은 '''
주석 다는 습관을 들이자
항상 습관 들이기

자료형
컴퓨터가 값을 메모리에 저장되게 하는데
주소값을 기억하기 어려우니
기억하기 쉬운 변수에 저장을 하는 것

프로그래밍에서 변수는
메모리의 주소를 기억하는 이름이다

우리는 변수를 이용해서 데이터를 기억한다

자료형 마다 차지하는 메모리의 크기가 다르다

주소값을 확인하고 싶을 때 id(변수명)

진수 표현
2진수 : 0b
8진수 : 0o
16진수 : 0x

실수 자료형
소수를 이진수로 바꾸려면
* 2 를 해서 앞에 있는 것만 빼서 저장
> 이렇게 되면 무한대로 반복돼서 메모리 낭비
>> 그래서 부동 소수점을 사용한다

실수 연산 시 
값 비교하는 과정에서 실수면
매우 작은 수보다 작은지를 확인하거나 math 모듈 활용

삼중 따옴표
내가 쓴 값 그대로 변수에 저장 (엔터로 줄바꿈도 저장됨)

Escape sequence
역슬래시 뒤에 특정 문자가 와서 특수한 기능을 하는 문자 조합
\n \t \r \0 등등
문자에 역슬래시를 넣고 싶을 때 \\

String Interpolation 
f-strings
문자열을 변수를 활용하여 만드는 법
문자열은 불변형 : 변경불가
> 불편함
문자열 사이에 문자열 끼워넣기

None
자료형 중 하나
데이터가 없음을 표현하기 위해서 사용
함수의 결과로 없음을 표현하기 위해서도 사용 > ''(비어있는 문자열)과 None은 다르다

불리언
논리 자료형 True/False

비교 연산자
is : 객체 비교 (메모리 저장 공간까지 같은 지)
== : 값 비교
동일 자료형 끼리 연산

XOR 둘 다 다를 때만 True

not : 피연산자의 논리값을 반대로 
print(not True)
>> False

파이썬에서는 데이터로 숫자, 문자열, 논리값을 사용할 수 있다
숫자와 문자열이 논리값으로 사용할 수 있다
숫자 0 비어있는 문자열 '' 이 논리값으로 사용될 때 False
Falsy : False는 아니지만 False로 취급되는 다양한 값
0, 0.0, (), [], {}, None, ""(빈 문자열)

논리 연산자도 우선순위가 존재
not, and, or 순    (괄호 사용하기)

논리 연산자 단축 평가
결과가 확실한 경우 두 번째 값은 확인하지 않고 첫 번째 값 반환

T and T > T
T and F > F
F and T > F
F and F > F
뒤 쪽의 것 보지 않고 첫 번째 값 반환

T or T > T
T or F > F
F or T > F
F or F > F
앞 쪽의 것이 T면 첫 번째 값 반환

arr = [ 0,1,2 ]
i <4 and arr[i] : 둘 다 참이어야 arr[i]가 실행됨

컨테이너
여러 개의 값을 담을 수 있는 것
예시 : List

분류
순서가 있는 데이터 (Ordered) vs 순서가 없는 데이터 (Unordered)
순서가 있다 != 정렬되어 있다.
ordered != sorted

순서가 있다 (sequence)
시퀀스 비시퀀스 구분
가변형 불변형 구분
시험 출제 

리스트는 시퀀스이면서 가변 자료형
문자열은 인덱스로 접근 가능하지만 불변

튜플은 여러 개의 값을 순서가 있는 구조로 저장
거의 리스트인데 불변
원소 하나인 튜플을 만들고 싶으면 (1,) 이런 식으로 원소 뒤에 쉼표

Range
숫자의 시퀀스를 나타내기 위해 사용
불변형 

기본형 : range(n)
> 0부터 n-1까지의 숫자의 시퀀스
>> range(3)  [0,1,2]

범위 지정 : range(n,m)
> n부터 m-1까지의 숫자의 시퀀스
>> range(1,5)  [1,2,3,4]

슬라이싱 연산자
시퀀스를 특정 단위로 잘라내는 것


비시퀀스형 컨테이너
키-값(key-value) 쌍으로 이뤄진 자료형
키를 이용해서 값을 가져오는 방식
키는 변경 불가능한 데이터만 활용 가능
> 숫자 문자열 튜플 불리언 range 
값에는 아무거나 가능

키는 중복 불가
값은 중복 가능

형변환
데이터의 형태를 바꾸는 것
암시적 형 변환
: 파이썬이 알아서 바꾸는 것
명시적 형 변환
: 직접 변경해야 하는 것

암시적 형 변환
print(True+3) # 4
print(3 + 5.0) # 8.0

데이터 무손실인 경우에만 명시적 형 변환이 된다.
5.0 > 5 X 
5 > 5.0 O 

명시적 형 변환
int 
str, float > int
단, 형식에 맞는 문자열만 정수로 변환 가능







































































